import HWP from 'hwp.js'

/**
 * HWP 파일에서 텍스트를 추출하고 일정 정보를 파싱합니다.
 */
export async function parseHwpPlan(buffer) {
  try {
    // HWP 파일에서 텍스트 추출
    const hwpDoc = new HWP(buffer)
    const text = hwpDoc.getText()
    
    console.log('HWP 텍스트 추출 완료:', text.substring(0, 500) + '...')
    
    // 일정 정보 추출을 위한 패턴들 (PDF와 동일)
    const patterns = {
      // 날짜 패턴 (예: 2024.01.15, 1월 15일, 01/15)
      date: /(\d{4}[\.\-\/]\d{1,2}[\.\-\/]\d{1,2}|\d{1,2}월\s*\d{1,2}일|\d{1,2}\/\d{1,2})/g,
      
      // 시간 패턴 (예: 09:00, 오전 9시, 9:30)
      time: /(\d{1,2}:\d{2}|오전\s*\d{1,2}시|오후\s*\d{1,2}시|\d{1,2}시\s*\d{0,2}분?)/g,
      
      // 장소 패턴 (주요 도시명, 관광지명)
      location: /(서울|부산|대구|인천|광주|대전|울산|세종|수원|고양|용인|성남|청주|전주|천안|안산|안양|부천|남양주|화성|평택|의정부|시흥|파주|광명|김포|군포|이천|오산|하남|양주|구리|안성|포천|의왕|여주|동두천|과천|가평|연천|제주|서귀포|도쿄|오사카|교토|나고야|후쿠오카|삿포로|요코하마|고베|센다이|히로시마|[가-힣]+(?:궁|탑|공원|박물관|미술관|전시관|체험관|놀이공원|리조트|호텔|식당|카페|마켓|마트|백화점|쇼핑몰|역|공항|터미널|항구|해변|산|강|호수|다리|광장|거리|시장|신사|절|성|기념관))/g,
      
      // 활동 패턴
      activity: /(견학|체험|관람|투어|쇼핑|식사|휴식|자유시간|이동|출발|도착|집합|해산|문화|역사|자연|전통|현대|산업|교육|엔터테인먼트|레저|스포츠|방문|탐방|순례|참관)/g
    }
    
    // 일정 정보 추출
    const schedules = extractScheduleFromHwp(text, patterns)
    
    // 추출된 정보 정리 및 검증
    const cleanedSchedules = validateAndCleanSchedules(schedules)
    
    return {
      success: true,
      rawText: text,
      schedules: cleanedSchedules,
      extractedInfo: {
        totalDays: Math.max(1, cleanedSchedules.length),
        locations: [...new Set(cleanedSchedules.map(s => s.location).filter(Boolean))],
        activities: [...new Set(cleanedSchedules.map(s => s.activityName).filter(Boolean))]
      }
    }
    
  } catch (error) {
    console.error('HWP 파싱 오류:', error)
    
    // fallback: 텍스트 기반 추출 시도
    try {
      const textContent = buffer.toString('utf-8')
      if (textContent && textContent.length > 100) {
        const patterns = {
          date: /(\d{4}[\.\-\/]\d{1,2}[\.\-\/]\d{1,2}|\d{1,2}월\s*\d{1,2}일)/g,
          time: /(\d{1,2}:\d{2}|오전\s*\d{1,2}시|오후\s*\d{1,2}시)/g,
          location: /(서울|부산|대구|인천|광주|대전|울산|세종|도쿄|오사카|교토|나고야|[가-힣]+(?:궁|탑|공원|박물관|미술관|전시관|체험관))/g,
          activity: /(견학|체험|관람|투어|쇼핑|식사|휴식|자유시간|이동|출발|도착|집합|해산)/g
        }
        
        const schedules = extractScheduleFromHwp(textContent, patterns)
        const cleanedSchedules = validateAndCleanSchedules(schedules)
        
        if (cleanedSchedules.length > 0) {
          return {
            success: true,
            rawText: textContent,
            schedules: cleanedSchedules,
            extractedInfo: {
              totalDays: cleanedSchedules.length,
              locations: [...new Set(cleanedSchedules.map(s => s.location).filter(Boolean))],
              activities: [...new Set(cleanedSchedules.map(s => s.activityName).filter(Boolean))]
            },
            warning: 'HWP 파싱 실패로 텍스트 기반 추출을 사용했습니다.'
          }
        }
      }
    } catch (fallbackError) {
      console.error('텍스트 기반 추출도 실패:', fallbackError)
    }
    
    return {
      success: false,
      error: error.message,
      schedules: []
    }
  }
}

/**
 * HWP 텍스트에서 일정 정보를 추출합니다.
 */
function extractScheduleFromHwp(text, patterns) {
  const lines = text.split('\n').filter(line => line.trim().length > 0)
  const schedules = []
  
  let currentDate = null
  let dayCounter = 1
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim()
    
    // 날짜 찾기
    const dateMatches = line.match(patterns.date)
    if (dateMatches) {
      currentDate = parseDateString(dateMatches[0])
      continue
    }
    
    // 시간과 활동이 함께 있는 라인 찾기
    const timeMatches = line.match(patterns.time)
    const locationMatches = line.match(patterns.location)
    const activityMatches = line.match(patterns.activity)
    
    if (timeMatches || locationMatches || activityMatches || line.length > 10) {
      const schedule = {
        id: `hwp_schedule_${schedules.length + 1}`,
        date: currentDate || generateDefaultDate(dayCounter),
        time: timeMatches ? normalizeTime(timeMatches[0]) : '09:00',
        location: locationMatches ? locationMatches[0] : extractLocationFromLine(line) || '미정',
        activityName: extractActivityName(line),
        type: determineActivityType(line),
        autoGenerated: true,
        adminNotes: `HWP에서 자동 추출: "${line}"`
      }
      
      schedules.push(schedule)
      
      if (!currentDate) {
        dayCounter++
      }
    }
  }
  
  // 기본 일정이 없으면 샘플 생성
  if (schedules.length === 0) {
    schedules.push(...generateDefaultSchedules())
  }
  
  return schedules
}

/**
 * 라인에서 장소 정보를 추출합니다.
 */
function extractLocationFromLine(line) {
  // 일반적인 장소 키워드 검색
  const locationKeywords = [
    '공항', '역', '호텔', '박물관', '미술관', '궁', '성', '공원',
    '시장', '거리', '광장', '터미널', '항구', '해변', '산', '강',
    '교육청', '학교', '대학교', '연구소', '센터'
  ]
  
  for (const keyword of locationKeywords) {
    if (line.includes(keyword)) {
      // 키워드 앞의 단어들을 장소명으로 추출
      const words = line.split(/\s+/)
      const keywordIndex = words.findIndex(word => word.includes(keyword))
      if (keywordIndex > 0) {
        return words.slice(Math.max(0, keywordIndex - 2), keywordIndex + 1).join(' ')
      }
      return keyword
    }
  }
  
  return null
}

/**
 * 날짜 문자열을 표준 형식으로 변환합니다.
 */
function parseDateString(dateStr) {
  try {
    // 다양한 날짜 형식 처리
    if (dateStr.includes('월') && dateStr.includes('일')) {
      // "1월 15일" 형식
      const match = dateStr.match(/(\d{1,2})월\s*(\d{1,2})일/)
      if (match) {
        const month = match[1].padStart(2, '0')
        const day = match[2].padStart(2, '0')
        return `2025-${month}-${day}`
      }
    } else if (dateStr.includes('.')) {
      // "2025.01.15" 형식
      const parts = dateStr.split('.')
      if (parts.length === 3) {
        return `${parts[0]}-${parts[1].padStart(2, '0')}-${parts[2].padStart(2, '0')}`
      }
    } else if (dateStr.includes('/')) {
      // "01/15" 형식
      const parts = dateStr.split('/')
      if (parts.length === 2) {
        return `2025-${parts[0].padStart(2, '0')}-${parts[1].padStart(2, '0')}`
      }
    }
    
    return dateStr
  } catch (error) {
    console.error('날짜 파싱 오류:', error)
    return new Date().toISOString().split('T')[0]
  }
}

/**
 * 시간 문자열을 표준 형식으로 변환합니다.
 */
function normalizeTime(timeStr) {
  try {
    if (timeStr.includes('오전')) {
      const hour = timeStr.match(/\d{1,2}/)[0]
      return `${hour.padStart(2, '0')}:00`
    } else if (timeStr.includes('오후')) {
      const hour = parseInt(timeStr.match(/\d{1,2}/)[0])
      const normalizedHour = hour === 12 ? 12 : hour + 12
      return `${normalizedHour.toString().padStart(2, '0')}:00`
    } else if (timeStr.includes(':')) {
      return timeStr
    } else if (timeStr.includes('시')) {
      const hour = timeStr.match(/\d{1,2}/)[0]
      return `${hour.padStart(2, '0')}:00`
    }
    
    return timeStr
  } catch (error) {
    return '09:00'
  }
}

/**
 * 라인에서 활동명을 추출합니다.
 */
function extractActivityName(line) {
  // 시간과 장소 정보를 제거하고 핵심 활동명 추출
  let activityName = line
  
  // 시간 정보 제거
  activityName = activityName.replace(/\d{1,2}:\d{2}|오전\s*\d{1,2}시|오후\s*\d{1,2}시|\d{1,2}시\s*\d{0,2}분?/g, '')
  
  // 특수문자 정리
  activityName = activityName.replace(/[-–—•]/g, '').trim()
  
  // 너무 짧으면 기본값 사용
  if (activityName.length < 3) {
    activityName = '문화체험 활동'
  }
  
  return activityName
}

/**
 * 활동 유형을 결정합니다.
 */
function determineActivityType(line) {
  if (line.includes('자유') || line.includes('개인')) {
    return 'free'
  } else if (line.includes('오후') || line.includes('저녁') || line.includes('숙소')) {
    return 'afternoon'
  } else {
    return 'activity'
  }
}

/**
 * 기본 날짜를 생성합니다.
 */
function generateDefaultDate(dayCounter) {
  const today = new Date()
  const targetDate = new Date(today)
  targetDate.setDate(today.getDate() + dayCounter - 1)
  return targetDate.toISOString().split('T')[0]
}

/**
 * 기본 일정을 생성합니다.
 */
function generateDefaultSchedules() {
  return [
    {
      id: 'default_hwp_1',
      date: generateDefaultDate(1),
      time: '09:00',
      location: '집합 장소',
      activityName: '연수 프로그램 시작',
      type: 'activity',
      autoGenerated: true,
      adminNotes: 'HWP 파싱 결과 - 기본 일정 생성됨'
    },
    {
      id: 'default_hwp_2',
      date: generateDefaultDate(1),
      time: '14:00',
      location: '자유 선택',
      activityName: '자유시간 활동',
      type: 'free',
      autoGenerated: true,
      adminNotes: 'HWP 파싱 결과 - 자유일정 생성됨'
    }
  ]
}

/**
 * 추출된 일정을 검증하고 정리합니다.
 */
function validateAndCleanSchedules(schedules) {
  return schedules.map((schedule, index) => ({
    ...schedule,
    id: schedule.id || `hwp_parsed_${index + 1}`,
    date: schedule.date || generateDefaultDate(1),
    time: schedule.time || '09:00',
    location: schedule.location || '미정',
    activityName: schedule.activityName || '활동',
    type: schedule.type || 'activity'
  }))
}

/**
 * HWP 파일인지 검증합니다.
 */
export function validateHwpFile(file) {
  const errors = []
  
  // 파일 확장자 검사
  const fileName = file.name.toLowerCase()
  if (!fileName.endsWith('.hwp') && !fileName.endsWith('.hwpx')) {
    errors.push('HWP 파일만 업로드 가능합니다. (.hwp, .hwpx)')
  }
  
  // 파일 크기 검사 (20MB 제한)
  if (file.size > 20 * 1024 * 1024) {
    errors.push('파일 크기는 20MB 이하여야 합니다.')
  }
  
  // 최소 크기 검사 (1KB 이상)
  if (file.size < 1024) {
    errors.push('파일이 너무 작습니다. 올바른 HWP 파일인지 확인해주세요.')
  }
  
  return {
    isValid: errors.length === 0,
    errors
  }
}
