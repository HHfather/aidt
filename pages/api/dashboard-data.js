import { db } from '../../firebaseConfig';
import { collection, getDocs, query, where } from 'firebase/firestore';

export default async function handler(req, res) {
  if (req.method === 'GET') {
    try {
      const { region } = req.query;
      
      if (!region) {
        return res.status(400).json({ success: false, error: 'region이 필요합니다.' });
      }

      console.log('대시보드 데이터 요청 - region:', region);

      const result = {
        schedules: [],
        participants: [],
        region: region
      };

      // 1. schedules 컬렉션에서 해당 region의 데이터 찾기
      try {
        const schedulesQuery = query(collection(db, 'schedules'));
        const schedulesSnapshot = await getDocs(schedulesQuery);
        
        // 모든 schedules 문서를 확인하여 해당 region의 데이터 찾기
        for (const doc of schedulesSnapshot.docs) {
          const data = doc.data();
          
          // region 필드가 있는 경우
          if (data.region) {
            if (data.region == region || data.region == String(region) || data.region == Number(region)) {
              console.log('Region 일치하는 문서 발견:', doc.id);
              
              // schedule 배열이 있는 경우
              if (data.schedule && Array.isArray(data.schedule)) {
                result.schedules = data.schedule.map(item => ({
                  id: `${item.date}_${item.time}`,
                  date: item.date,
                  time: item.time,
                  activityName: item.activity,
                  location: item.location,
                  adminNotes: item.description || '',
                  type: 'normal',
                  hasResearchTask: item.activity?.includes('연구') || item.activity?.includes('과제') || false,
                  isMeal: item.activity?.includes('조식') || item.activity?.includes('중식') || item.activity?.includes('석식') || item.activity?.includes('아침') || item.activity?.includes('점심') || item.activity?.includes('저녁') || false
                }));
              }
              
                             // participants 배열이 있는 경우
               if (data.participants && Array.isArray(data.participants)) {
                 result.participants = data.participants.filter(participant => 
                   participant.name && 
                   !participant.name.includes('부재') && 
                   (!participant.affiliation || !participant.affiliation.includes('부재'))
                 ).sort((a, b) => (a.name || '').localeCompare(b.name || '', 'ko'));
               }
              
              break; // 첫 번째 일치하는 문서를 찾으면 중단
            }
          }
        }
        
        console.log('처리된 일정:', result.schedules.length, '개');
        console.log('처리된 참가자:', result.participants.length, '개');
        
      } catch (error) {
        console.error('Schedules 조회 오류:', error);
        return res.status(500).json({ success: false, error: '일정 조회 중 오류가 발생했습니다.' });
      }

      // 2. 자유시간 자동 생성
      if (result.schedules.length > 0) {
        const schedulesByDate = {};
        
        // 날짜별로 일정 그룹화
        result.schedules.forEach(schedule => {
          if (!schedulesByDate[schedule.date]) {
            schedulesByDate[schedule.date] = [];
          }
          schedulesByDate[schedule.date].push(schedule);
        });
        
        // 각 날짜의 마지막 일정 1시간 후에 자유시간 추가
        Object.keys(schedulesByDate).forEach(date => {
          const daySchedules = schedulesByDate[date];
          
          // 시간순 정렬
          daySchedules.sort((a, b) => {
            const timeA = a.time || '00:00';
            const timeB = b.time || '00:00';
            return timeA.localeCompare(timeB);
          });
          
          // 마지막 일정 1시간 후에 자유시간 추가
          if (daySchedules.length > 0) {
            const lastSchedule = daySchedules[daySchedules.length - 1];
            const lastTime = lastSchedule.time || '18:00';
            
            // 시간을 분으로 변환하여 1시간 추가
            const [hours, minutes] = lastTime.split(':').map(Number);
            const freeTimeHours = hours + 1;
            const freeTime = `${freeTimeHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
            
            result.schedules.push({
              id: `auto_free_${date}`,
              date: date,
              time: freeTime,
              activityName: '🗓️ 자유일정',
              location: '자유 선택',
              type: 'free',
              adminNotes: '자유로운 시간을 만끽해보세요!',
              autoGenerated: true
            });
          }
        });
        
        // 전체 일정을 날짜, 시간순으로 정렬
        result.schedules.sort((a, b) => {
          if (a.date !== b.date) {
            return a.date.localeCompare(b.date);
          }
          return a.time.localeCompare(b.time);
        });
      }

      res.status(200).json({
        success: true,
        data: result
      });

    } catch (error) {
      console.error('대시보드 데이터 조회 오류:', error);
      res.status(500).json({
        success: false,
        error: '대시보드 데이터 조회 중 오류가 발생했습니다.',
        details: error.message
      });
    }
  } else {
    res.setHeader('Allow', ['GET']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
} 