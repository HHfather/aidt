import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Link from 'next/link'
import { 
  collection, 
  query, 
  where, 
  getDocs, 
  orderBy 
} from 'firebase/firestore'
import { db } from '../firebaseConfig'
import toast from 'react-hot-toast'

export default function Dashboard() {
  const router = useRouter()
  const [user, setUser] = useState(null)
  const [project, setProject] = useState(null)
  const [schedules, setSchedules] = useState([])
  const [announcements, setAnnouncements] = useState([])
  const [loading, setLoading] = useState(true)
  const [userStats, setUserStats] = useState({
    comments: 3,
    reactions: 12,
    photos: 2
  })
  const [teamRanking, setTeamRanking] = useState({
    currentRank: 1,
    totalTeams: 4,
    pointsToNext: 0,
    motivationMessage: ''
  })

  useEffect(() => {
    // 사용자 세션 확인
    const userSession = localStorage.getItem('userSession')
    if (!userSession) {
      router.push('/')
      return
    }

    try {
      const userData = JSON.parse(userSession)
      setUser(userData)
      setProject(userData.currentProject)
      loadProjectData(userData.currentProject.id, userData)
    } catch (error) {
      console.error('세션 로드 오류:', error)
      router.push('/')
    }
  }, [router])

  const loadProjectData = async (projectId, userData) => {
    try {
      // 일정 데이터 로드 - 자동 자유일정 삽입 로직 포함
      await loadSchedulesWithFreeTime(projectId)
      
      // 공지사항 로드
      await loadAnnouncements(projectId)
      
      // 사용자 통계 로드
      await loadUserStats(userData.id)

      // 팀 순위 로드
      await loadTeamRanking(userData.team)

      setLoading(false)
    } catch (error) {
      console.error('프로젝트 데이터 로드 오류:', error)
      toast.error('데이터를 불러오는 중 오류가 발생했습니다.')
      setLoading(false)
    }
  }

  const loadSchedulesWithFreeTime = async (projectId) => {
    try {
      const schedulesQuery = query(
        collection(db, 'schedules'),
        where('projectId', '==', projectId),
        orderBy('date', 'asc')
      )
      const schedulesSnapshot = await getDocs(schedulesQuery)
      const schedulesData = schedulesSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }))
      
      if (schedulesData.length > 0) {
        // 📋 자유일정 카드 자동 삽입 로직
        const enhancedSchedules = []
        
        // 날짜별로 그룹화
        const schedulesByDate = {}
        schedulesData.forEach(schedule => {
          const date = schedule.date
          if (!schedulesByDate[date]) {
            schedulesByDate[date] = []
          }
          schedulesByDate[date].push(schedule)
        })

        // 각 날짜의 마지막에 자유일정 카드 추가
        Object.keys(schedulesByDate).sort().forEach(date => {
          const daySchedules = schedulesByDate[date]
          
          // 해당 날짜의 일정들을 시간순으로 정렬
          daySchedules.sort((a, b) => {
            const timeA = a.time ? a.time.replace(':', '') : '0000'
            const timeB = b.time ? b.time.replace(':', '') : '0000'
            return timeA.localeCompare(timeB)
          })
          
          // 기존 일정들 추가
          enhancedSchedules.push(...daySchedules)
          
          // 해당 날짜에 자유일정이 없으면 자동으로 추가
          const hasFreeSchedule = daySchedules.some(s => s.type === 'free')
          if (!hasFreeSchedule) {
            const freeScheduleCard = {
              id: `auto_free_${date}`,
              date: date,
              time: '자유시간',
              activityName: '🗓️ 자유일정',
              location: '자유 선택',
              type: 'free',
              adminNotes: '개인 또는 팀별로 자유롭게 계획할 수 있는 시간입니다. 새로운 활동을 만들거나 참여해보세요!',
              autoGenerated: true
            }
            enhancedSchedules.push(freeScheduleCard)
          }
        })

        setSchedules(enhancedSchedules)
      } else {
        // 샘플 데이터 + 자동 자유일정
        const sampleSchedules = [
          {
            id: 'temp1',
            date: '2025-08-06',
            time: '09:00',
            activityName: '프라하 성 방문',
            location: '프라하, 체코',
            adminNotes: ''
          },
          {
            id: 'temp2',
            date: '2025-08-06',
            time: '14:00',
            activityName: '카를교 도보 투어',
            location: '프라하, 체코',
            adminNotes: ''
          },
          // 8월 6일 자유일정 자동 추가
          {
            id: 'auto_free_2025-08-06',
            date: '2025-08-06',
            time: '자유시간',
            activityName: '🗓️ 자유일정',
            location: '자유 선택',
            type: 'free',
            adminNotes: '오늘 하루의 공식 일정이 끝난 후 자유롭게 시간을 보내세요!',
            autoGenerated: true
          },
          {
            id: 'temp3',
            date: '2025-08-07',
            time: '10:00',
            activityName: '프라하 교육청 방문',
            location: '프라하, 체코',
            adminNotes: ''
          },
          // 8월 7일 자유일정 자동 추가
          {
            id: 'auto_free_2025-08-07',
            date: '2025-08-07',
            time: '자유시간',
            activityName: '🗓️ 자유일정',
            location: '자유 선택',
            type: 'free',
            adminNotes: '교육청 방문 후 자유로운 시간을 즐겨보세요!',
            autoGenerated: true
          },
          {
            id: 'temp4',
            date: '2025-08-08',
            time: '09:30',
            activityName: '비엔나 궁전 투어',
            location: '비엔나, 오스트리아',
            adminNotes: ''
          },
          // 8월 8일 자유일정 자동 추가
          {
            id: 'auto_free_2025-08-08',
            date: '2025-08-08',
            time: '자유시간',
            activityName: '🗓️ 자유일정',
            location: '자유 선택',
            type: 'free',
            adminNotes: '비엔나에서의 자유로운 시간을 만끽해보세요!',
            autoGenerated: true
          }
        ]
        setSchedules(sampleSchedules)
      }
    } catch (error) {
      console.error('일정 로드 오류:', error)
    }
  }

  const loadAnnouncements = async (projectId) => {
    try {
      const announcementQuery = query(
        collection(db, 'announcements'),
        where('projectId', '==', projectId),
        orderBy('createdAt', 'desc')
      )
      const announcementSnapshot = await getDocs(announcementQuery)
      const announcementData = announcementSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }))

      if (announcementData.length > 0) {
        setAnnouncements(announcementData.slice(0, 3))
      } else {
        setAnnouncements([
          {
            id: 1,
            date: new Date().toISOString().split('T')[0],
            content: "🎉 안녕하세요! 연수 프로그램에 오신 것을 환영합니다. 📸 사진을 많이 찍어서 공유해주세요!",
            author: "가이드",
            urgentLevel: "normal"
          },
          {
            id: 2,
            date: new Date().toISOString().split('T')[0],
            content: "⏰ 오늘 오후 2시 카를교 투어가 예정되어 있습니다. 늦지 마세요!",
            author: "박철수 가이드",
            urgentLevel: "urgent"
          }
        ])
      }
    } catch (error) {
      console.error('공지사항 로드 오류:', error)
    }
  }

  const loadUserStats = async (userId) => {
    try {
      // 실제 Firebase 데이터 조회 로직 (기본값으로 설정)
      setUserStats({
        comments: 3,
        reactions: 12,
        photos: 2
      })
    } catch (error) {
      console.error('통계 로드 오류:', error)
    }
  }

  const loadTeamRanking = async (teamName) => {
    try {
      const motivationMessages = [
        "선생님들보다 더 많이 작성하지 않을까요? 📝✨",
        "이정도 참여도면 선생님들도 깜짝 놀라실 것 같아요! 👨‍🏫😮",
        "벌써 이렇게 활발하시다니, 연수가 끝날 때까지 얼마나 더 성장하실지 기대돼요! 🚀",
        "선생님들 눈에 띌 만한 활동량이네요! 계속 이런 열정 보여주세요! 🔥",
        "이런 적극성이라면 다른 팀들도 자극받을 것 같아요! 💪"
      ]

      setTeamRanking({
        currentRank: 1,
        totalTeams: 4,
        pointsToNext: 15,
        motivationMessage: motivationMessages[Math.floor(Math.random() * motivationMessages.length)]
      })
    } catch (error) {
      console.error('팀 순위 로드 오류:', error)
    }
  }

  const handleLogout = () => {
    localStorage.removeItem('userSession')
    toast.success('로그아웃 되었습니다.')
    router.push('/')
  }

  const formatDate = (dateString) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('ko-KR', {
      month: 'long',
      day: 'numeric',
      weekday: 'short'
    })
  }

  const handleRefresh = async () => {
    setLoading(true)
    if (user && project) {
      await loadProjectData(project.id, user)
    }
    toast.success('새로고침 완료! 🔄')
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-lg text-gray-600">데이터 로딩 중...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-100">
      {/* 헤더 */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              <h1 className="text-2xl font-bold text-gray-900">
                📋 {project?.name || '연수 프로그램'} 대시보드
              </h1>
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={handleRefresh}
                className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg"
              >
                🔄 새로고침
              </button>
              <button
                onClick={handleLogout}
                className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg"
              >
                로그아웃
              </button>
            </div>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          
          {/* 사용자 환영 메시지 */}
          <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-lg p-6 mb-6">
            <h2 className="text-2xl font-bold mb-2">
              안녕하세요, {user?.name}님! 🎉
            </h2>
            <p className="text-blue-100">
              {project?.name || '연수 프로그램'}에 오신 것을 환영합니다.
            </p>
          </div>

          {/* 팀 순위 및 동기부여 메시지 */}
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-6">
            <div className="flex items-center justify-between">
              <div>
                <h3 className="text-lg font-semibold text-yellow-800">
                  🏆 현재 팀 순위: {teamRanking.currentRank}위 / {teamRanking.totalTeams}팀
                </h3>
                {teamRanking.pointsToNext > 0 && (
                  <p className="text-yellow-700 text-sm mt-1">
                    다음 순위까지 {teamRanking.pointsToNext}점 필요
                  </p>
                )}
              </div>
            </div>
            <p className="text-yellow-700 mt-2 text-sm">
              💡 {teamRanking.motivationMessage}
            </p>
          </div>

          {/* 통계 카드 */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="text-3xl">💬</div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">내 댓글 수</p>
                  <p className="text-2xl font-bold text-gray-900">{userStats.comments}</p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="text-3xl">❤️</div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">내 반응 수</p>
                  <p className="text-2xl font-bold text-gray-900">{userStats.reactions}</p>
                </div>
              </div>
            </div>
            <div className="bg-white rounded-lg shadow p-6">
              <div className="flex items-center">
                <div className="text-3xl">📸</div>
                <div className="ml-4">
                  <p className="text-sm font-medium text-gray-500">업로드한 사진</p>
                  <p className="text-2xl font-bold text-gray-900">{userStats.photos}</p>
                </div>
              </div>
            </div>
          </div>

          {/* 메인 컨텐츠 그리드 */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            
            {/* 왼쪽: 일정 */}
            <div className="lg:col-span-2">
              <div className="bg-white rounded-lg shadow">
                <div className="p-6 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900">📅 오늘의 일정</h3>
                </div>
                <div className="p-6">
                  <div className="space-y-4">
                    {schedules.slice(0, 5).map((schedule) => (
                      <div key={schedule.id} className="border border-gray-200 rounded-lg p-4">
                        <div className="flex justify-between items-start">
                          <div className="flex-1">
                            <div className="flex items-center space-x-2 mb-2">
                              <span className="text-sm font-medium text-blue-600">
                                {schedule.time}
                              </span>
                              <span className="text-sm text-gray-500">
                                {formatDate(schedule.date)}
                              </span>
                              {schedule.autoGenerated && (
                                <span className="bg-green-100 text-green-800 px-2 py-1 rounded text-xs">
                                  자동 생성
                                </span>
                              )}
                            </div>
                            <h4 className="font-semibold text-gray-900 mb-1">
                              {schedule.activityName}
                            </h4>
                            <p className="text-sm text-gray-600 mb-2">
                              📍 {schedule.location}
                            </p>
                            {schedule.adminNotes && (
                              <p className="text-xs text-gray-500">
                                💡 {schedule.adminNotes}
                              </p>
                            )}
                          </div>
                          {schedule.type === 'free' && (
                            <Link href="/free-schedule">
                              <button className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm">
                                자유일정 관리
                              </button>
                            </Link>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                  <div className="mt-4">
                    <Link href="/free-schedule">
                      <button className="w-full bg-blue-600 hover:bg-blue-700 text-white py-2 rounded-lg">
                        🗓️ 자유일정 관리하기
                      </button>
                    </Link>
                  </div>
                </div>
              </div>
            </div>

            {/* 오른쪽: 공지사항 및 빠른 액세스 */}
            <div className="space-y-6">
              
              {/* 공지사항 */}
              <div className="bg-white rounded-lg shadow">
                <div className="p-6 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900">📢 공지사항</h3>
                </div>
                <div className="p-6">
                  <div className="space-y-3">
                    {announcements.map((announcement) => (
                      <div key={announcement.id} className={`p-3 rounded-lg border-l-4 ${
                        announcement.urgentLevel === 'urgent' 
                          ? 'bg-red-50 border-red-400' 
                          : 'bg-blue-50 border-blue-400'
                      }`}>
                        <p className="text-sm font-medium text-gray-900">
                          {announcement.content}
                        </p>
                        <div className="flex justify-between items-center mt-2">
                          <span className="text-xs text-gray-500">
                            {announcement.author}
                          </span>
                          <span className="text-xs text-gray-500">
                            {new Date(announcement.date).toLocaleDateString()}
                          </span>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>

              {/* 빠른 액세스 */}
              <div className="bg-white rounded-lg shadow">
                <div className="p-6 border-b border-gray-200">
                  <h3 className="text-lg font-semibold text-gray-900">🚀 빠른 액세스</h3>
                </div>
                <div className="p-6">
                  <div className="space-y-3">
                    <Link href="/activity/sample">
                      <button className="w-full text-left bg-gray-50 hover:bg-gray-100 p-3 rounded-lg">
                        📸 사진 갤러리
                      </button>
                    </Link>
                    <Link href="/free-schedule">
                      <button className="w-full text-left bg-gray-50 hover:bg-gray-100 p-3 rounded-lg">
                        🗓️ 자유일정
                      </button>
                    </Link>
                    <Link href="/admin">
                      <button className="w-full text-left bg-gray-50 hover:bg-gray-100 p-3 rounded-lg">
                        ⚙️ 관리자 패널
                      </button>
                    </Link>
                  </div>
                </div>
              </div>

            </div>
          </div>

        </div>
      </main>
    </div>
  )
}
