import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Link from 'next/link'
import { 
  collection, 
  query, 
  where, 
  getDocs, 
  orderBy 
} from 'firebase/firestore'
import { db } from '../firebaseConfig'
import toast from 'react-hot-toast'

// ÌÉ≠ Ïª¥Ìè¨ÎÑåÌä∏Îì§ import
import AnnouncementsTab from '../components/AnnouncementsTab'
import PhotosTab from '../components/PhotosTab'
import ScheduleTab from '../components/ScheduleTab'
import FeedbackTab from '../components/FeedbackTab'
import ParticipantsTab from '../components/ParticipantsTab'

export default function Dashboard() {
  const router = useRouter()
  const [user, setUser] = useState(null)
  const [project, setProject] = useState(null)
  const [schedules, setSchedules] = useState([])
  const [announcements, setAnnouncements] = useState([])
  const [participants, setParticipants] = useState([])
  const [rankings, setRankings] = useState([])
  const [loading, setLoading] = useState(true)
  const [activeTab, setActiveTab] = useState('photos') // Í∏∞Î≥∏ ÌÉ≠ÏùÑ Í≥µÏßÄÏÇ¨Ìï≠ÏúºÎ°ú ÏÑ§Ï†ï
  
  // ÏÇ¨Ïö©Ïûê ÌÜµÍ≥Ñ
  const [userStats, setUserStats] = useState({
    totalScore: 0,
    rank: 0,
    commentsAdded: 0,
    photosAdded: 0,
    emojisAdded: 0
  })

  useEffect(() => {
    // ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò ÌôïÏù∏
    const userSession = localStorage.getItem('userSession')
    if (!userSession) {
      router.push('/')
      return
    }

    try {
      const userData = JSON.parse(userSession)
      setUser(userData)
      setProject(userData.currentProject)
      loadProjectData(userData.currentProject.id, userData)
    } catch (error) {
      console.error('ÏÑ∏ÏÖò Î°úÎìú Ïò§Î•ò:', error)
      router.push('/')
    }
  }, [router])

  const loadProjectData = async (projectId, userData) => {
    try {
      // ÏùºÏ†ï Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      await loadSchedules(projectId)
      
      // Í≥µÏßÄÏÇ¨Ìï≠ Î°úÎìú
      await loadAnnouncements(projectId)
      
      // Ï∞∏Í∞ÄÏûê Î™©Î°ù Î°úÎìú
      await loadParticipants(projectId)
      

      
      setLoading(false)
    } catch (error) {
      console.error('ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', error)
      toast.error('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.')
      setLoading(false)
    }
  }

  const loadSchedules = async (projectId) => {
    try {
      // ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖòÏóêÏÑú Í∂åÏó≠ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
      const userSession = localStorage.getItem('userSession')
      if (!userSession) {
        console.log('ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò ÏóÜÏùå')
        setSchedules([])
        return
      }
      
      const userData = JSON.parse(userSession)
      const region = userData.region || userData.affiliation?.replace(/[^0-9]/g, '') || '1'
      
      // Í∞ÄÏù¥Îìú ÏùºÏ†ï Í¥ÄÎ¶¨ÏóêÏÑú ÏùºÏ†ï Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
      const response = await fetch(`/api/schedule-management?region=${region}`)
      const result = await response.json()
      
      if (result.success && result.data && result.data.activities) {
        const processedSchedules = []
        const activities = result.data.activities
        
        Object.keys(activities).forEach(date => {
          const daySchedules = activities[date]
          
          // Ìï¥Îãπ ÎÇ†ÏßúÏùò ÏùºÏ†ïÎì§ÏùÑ ÏãúÍ∞ÑÏàúÏúºÎ°ú Ï†ïÎ†¨
          daySchedules.sort((a, b) => {
            const timeA = a.time || '00:00'
            const timeB = b.time || '00:00'
            return timeA.localeCompare(timeB)
          })
          
          // Í∏∞Ï°¥ ÏùºÏ†ïÎì§ Ï∂îÍ∞Ä
          daySchedules.forEach(schedule => {
            processedSchedules.push({
              id: `${date}_${schedule.time}`,
              date: date,
              time: schedule.time,
              activityName: schedule.activity,
              location: schedule.location,
              adminNotes: schedule.description || '',
              type: 'normal',
              hasResearchTask: schedule.activity?.includes('Ïó∞Íµ¨') || schedule.activity?.includes('Í≥ºÏ†ú') || false,
              isMeal: schedule.activity?.includes('Ï°∞Ïãù') || schedule.activity?.includes('Ï§ëÏãù') || schedule.activity?.includes('ÏÑùÏãù') || schedule.activity?.includes('ÏïÑÏπ®') || schedule.activity?.includes('Ï†êÏã¨') || schedule.activity?.includes('Ï†ÄÎÖÅ') || false
            })
          })
          
          // ÎßàÏßÄÎßâ ÏùºÏ†ï 1ÏãúÍ∞Ñ ÌõÑÏóê ÏûêÏú†ÏãúÍ∞Ñ Ï∂îÍ∞Ä
          if (daySchedules.length > 0) {
            const lastSchedule = daySchedules[daySchedules.length - 1]
            const lastTime = lastSchedule.time || '18:00'
            
            // ÏãúÍ∞ÑÏùÑ Î∂ÑÏúºÎ°ú Î≥ÄÌôòÌïòÏó¨ 1ÏãúÍ∞Ñ Ï∂îÍ∞Ä
            const [hours, minutes] = lastTime.split(':').map(Number)
            const freeTimeHours = hours + 1
            const freeTime = `${freeTimeHours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`
            
            processedSchedules.push({
              id: `auto_free_${date}`,
              date: date,
              time: freeTime,
              activityName: 'üóìÔ∏è ÏûêÏú†ÏùºÏ†ï',
              location: 'ÏûêÏú† ÏÑ†ÌÉù',
              type: 'free',
              adminNotes: 'ÏûêÏú†Î°úÏö¥ ÏãúÍ∞ÑÏùÑ ÎßåÎÅΩÌï¥Î≥¥ÏÑ∏Ïöî!',
              autoGenerated: true
            })
          }
        })
        
        setSchedules(processedSchedules)
      } else {
        // DBÏóê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏùÑ ÎïåÎäî Îπà Î∞∞Ïó¥Î°ú ÏÑ§Ï†ï
        setSchedules([])
      }
    } catch (error) {
      console.log('ÏùºÏ†ï Î°úÎìú Ïã§Ìå®:', error)
      setSchedules([])
    }
  }

  const loadAnnouncements = async (projectId) => {
    try {
      // ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖòÏóêÏÑú Í∂åÏó≠ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
      const userSession = localStorage.getItem('userSession')
      if (!userSession) {
        console.log('ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò ÏóÜÏùå')
        setAnnouncements([])
        return
      }
      
      const userData = JSON.parse(userSession)
      const region = userData.region || userData.affiliation?.replace(/[^0-9]/g, '') || '1'
      
      // Í≥µÏßÄÏÇ¨Ìï≠ APIÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
      const response = await fetch(`/api/announcements?region=${region}`)
      const result = await response.json()
      
      if (result.success && result.data && result.data.length > 0) {
        // Í≥µÏßÄÏÇ¨Ìï≠ Îç∞Ïù¥ÌÑ∞Î•º ÎåÄÏãúÎ≥¥Îìú ÌòïÏãùÏóê ÎßûÍ≤å Î≥ÄÌôò
        const formattedAnnouncements = result.data.slice(0, 5).map(announcement => ({
          id: announcement.id,
          date: announcement.date,
          content: announcement.content,
          author: announcement.createdBy,
          urgentLevel: announcement.urgentLevel || 'normal'
        }))
        setAnnouncements(formattedAnnouncements)
      } else {
        setAnnouncements([
          {
            id: 1,
            date: new Date().toISOString().split('T')[0],
            content: "üéâ ÏïàÎÖïÌïòÏÑ∏Ïöî! Ïó∞Ïàò ÌîÑÎ°úÍ∑∏Îû®Ïóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§.",
            author: "Í∞ÄÏù¥Îìú",
            urgentLevel: "normal"
          }
        ])
      }
    } catch (error) {
      console.log('Í≥µÏßÄÏÇ¨Ìï≠ Î°úÎìú Ïã§Ìå®:', error)
      setAnnouncements([
        {
          id: 1,
          date: new Date().toISOString().split('T')[0],
          content: "üéâ ÏïàÎÖïÌïòÏÑ∏Ïöî! Ïó∞Ïàò ÌîÑÎ°úÍ∑∏Îû®Ïóê Ïò§Ïã† Í≤ÉÏùÑ ÌôòÏòÅÌï©ÎãàÎã§.",
          author: "Í∞ÄÏù¥Îìú",
          urgentLevel: "normal"
        }
      ])
    }
  }

  const loadParticipants = async (projectId) => {
    try {
      // ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖòÏóêÏÑú Í∂åÏó≠ Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
      const userSession = localStorage.getItem('userSession')
      if (!userSession) {
        console.log('ÏÇ¨Ïö©Ïûê ÏÑ∏ÏÖò ÏóÜÏùå')
        setParticipants([])
        return
      }
      
      const userData = JSON.parse(userSession)
      const region = userData.region || userData.affiliation?.replace(/[^0-9]/g, '') || '1'
      
      // Ï∞∏Í∞ÄÏûê Í¥ÄÎ¶¨ÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (Ï∞∏Í∞ÄÏûê Í¥ÄÎ¶¨Í∞Ä Î∂àÎü¨Ïò§Îäî Í∞í Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©)
      const response = await fetch(`/api/participants?region=${region}`)
      const result = await response.json()
      
      if (result.success && result.data && result.data.length > 0) {
        // Ï∞∏Í∞ÄÏûê Îç∞Ïù¥ÌÑ∞Î•º Í∞ÄÎÇòÎã§ÏàúÏúºÎ°ú Ï†ïÎ†¨ (Î∂ÄÏû¨Ïûê Ï†úÏô∏)
        const activeParticipants = result.data.filter(participant => 
          !participant.name?.includes('Î∂ÄÏû¨') && 
          !participant.affiliation?.includes('Î∂ÄÏû¨')
        )
        
        const sortedParticipants = activeParticipants.sort((a, b) => 
          a.name.localeCompare(b.name, 'ko')
        )
        setParticipants(sortedParticipants)
      } else {
        setParticipants([])
      }
    } catch (error) {
      console.log('Ï∞∏Í∞ÄÏûê Î°úÎìú Ïã§Ìå®:', error)
      setParticipants([])
    }
  }



  const handleLogout = () => {
    localStorage.removeItem('userSession')
    toast.success('Î°úÍ∑∏ÏïÑÏõÉ ÎêòÏóàÏäµÎãàÎã§.')
    router.push('/')
  }

  const formatDate = (dateString) => {
    const date = new Date(dateString)
    return date.toLocaleDateString('ko-KR', {
      month: 'long',
      day: 'numeric',
      weekday: 'short'
    })
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-100 flex items-center justify-center">
        <div className="text-lg">Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...</div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-100">
      {/* Ìó§Îçî */}
      <header className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">
                {project?.projectName}
              </h1>
              <p className="text-sm text-gray-600">
                {user?.name}Îãò ({user?.affiliation})
              </p>
            </div>
            <button
              onClick={handleLogout}
              className="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors text-sm"
            >
              Î°úÍ∑∏ÏïÑÏõÉ
            </button>
          </div>
        </div>
      </header>

      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          
          {/* ÌÉ≠ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò */}
          <div className="mb-6">
            <div className="border-b border-gray-200">
              <nav className="-mb-px flex space-x-8">
                {[
                  { id: 'photos', name: 'Î≤†Ïä§Ìä∏ Ìè¨ÌÜ†', icon: 'üì∏' },
                  { id: 'announcements', name: 'Í≥µÏßÄÏÇ¨Ìï≠ Î∞è Ïò§ÎäòÏùò ÏùºÏ†ï', icon: 'üì¢' },
                  { id: 'schedule', name: 'Ï†ÑÏ≤¥ Ïó∞Ïàò ÏùºÏ†ï', icon: 'üìÖ' },
                  { id: 'participants', name: 'Ìï®ÍªòÌïòÎäî Î∂ÑÎì§', icon: 'üë•' },
                  { id: 'feedback', name: 'ÌîºÎìúÎ∞± Î≥¥ÎÇ¥Í∏∞', icon: 'üìù' }
                ].map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`py-2 px-1 border-b-2 font-medium text-sm ${
                      activeTab === tab.id
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    }`}
                  >
                    {tab.icon} {tab.name}
                  </button>
                ))}
              </nav>
            </div>
          </div>

          {/* ÌÉ≠ ÎÇ¥Ïö© */}

          {activeTab === 'photos' && <PhotosTab />}

          {activeTab === 'announcements' && (
            <AnnouncementsTab 
              announcements={announcements}
              schedules={schedules}
              formatDate={formatDate}
            />
          )}

          {activeTab === 'schedule' && (
            <ScheduleTab 
              projectId={project?.id}
            />
          )}

          {activeTab === 'participants' && (
            <ParticipantsTab 
              participants={participants}
            />
          )}

          {activeTab === 'feedback' && (
            <FeedbackTab />
          )}

        </div>
      </main>
    </div>
  )
}
